{"version":3,"sources":["components/ToDoItem.jsx","components/ToDoForm.jsx","components/ToDo.jsx","index.jsx"],"names":["ToDoItem","props","item","onCheck","onRemove","detatchTitleAndTime","title","time","raw","content","match","length","matchedTimePart","substr","replace","className","completed","checked","onChange","id","description","type","onClick","e","preventDefault","icon","faTrash","ToDoForm","onSubmit","onRemoveCompleted","Form","useForm","form","layout","onFinish","values","resetFields","Item","name","rules","required","message","pattern","min","placeholder","htmlType","config","headers","Authorization","ToDo","useState","todos","setTodos","idCount","setIdCount","useEffect","a","axios","get","result","data","index","findIndex","todo","delete","splice","filter","post","indexOf","titleWithCreationDate","moment","Date","now","format","extra","map","renderTodoItems","Header","Layout","Footer","Content","App","span","offset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d68a01e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Checkbox, Divider } from 'antd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const ToDoItem = (props) => {\r\n  const { item, onCheck, onRemove } = props;\r\n  const onRemoveItem = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (onRemove) {\r\n      onRemove(item.id);\r\n    }\r\n  }\r\n\r\n  const onCheckItem = () => {\r\n    if (onCheck) {\r\n      onCheck(item.id);\r\n    }\r\n  }\r\n\r\n  /* Since there is no data element corresponding the date and time of creation\r\n  in the API's model, the solution is to store it inside the content along with the title and \r\n  then parse appropriately while rendering */\r\n  const detatchTitleAndTime = () => {\r\n    const timeRegex = /\\s\\|\\s\\d{2}\\.\\d{2}\\.\\d{4}\\s-\\s\\d{2}:\\d{2}/;\r\n    const raw = item.content;\r\n    const match = raw.match(timeRegex);\r\n\r\n    let title, time;\r\n\r\n    if (match && match.length > 0) {\r\n      const matchedTimePart = match[match.length - 1];\r\n      time = matchedTimePart.substr(3);\r\n      title = raw.replace(matchedTimePart, '');\r\n    } else {\r\n      time = \"N/A\";\r\n      title = raw;\r\n    }\r\n\r\n    return { title, time };\r\n  }\r\n\r\n  return (\r\n    <li className={\"todo-item\" + item.completed === true ? \" completed\" : \"\"} key={item.id}>\r\n      <h3 className={item.completed === true ? \"completed\" : \"\"}>{detatchTitleAndTime().title}</h3>\r\n      <div className={\"todo-item-content\"}>\r\n        <Checkbox className={item.completed ? \"completed\" : \"\"}\r\n          checked={item.completed}\r\n          onChange={onCheckItem}\r\n        >{item.description}</Checkbox>\r\n        <Button className=\"remove-btn\" type=\"danger\" onClick={onRemoveItem}><FontAwesomeIcon icon={faTrash}></FontAwesomeIcon></Button>\r\n      </div>\r\n      <time className=\"time-of-creation\">{detatchTitleAndTime().time}</time>\r\n      <Divider />\r\n    </li>\r\n  )\r\n}","import React from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\n\r\nexport const ToDoForm = (props) => {\r\n  const { onSubmit, onRemoveCompleted } = props;\r\n\r\n  const titleRules = [\r\n    {\r\n      required: true,\r\n      message: 'Todo title cannot be empty!',\r\n    },\r\n    {\r\n      pattern: /([A-Z]|[А-Я]).*/,\r\n      message: 'Todo title should start with a capital letter!',\r\n    },\r\n    {\r\n      min: 3,\r\n      message: 'Todo title should be longer than 3 characters!',\r\n    },\r\n  ];\r\n\r\n  const descriptionRules = [\r\n    {\r\n      required: true,\r\n      message: 'Todo description cannot be empty!',\r\n    },\r\n    {\r\n      min: 3,\r\n      message: 'Todo description should be longer than 3 characters!',\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n  const onFinish = (values) => {\r\n    if (onSubmit) {\r\n      onSubmit({title: values.title, description: values.description});\r\n    }\r\n    form.resetFields();\r\n  }\r\n\r\n  return (\r\n    <Form className=\"todo-form\" form={form} layout={'column'} onFinish={onFinish}>\r\n      <Form.Item name=\"title\" className=\"todo-form-input\" rules={titleRules}>\r\n        <Input placeholder={'Todo title'} />\r\n      </Form.Item>\r\n      <Form.Item name=\"description\" className=\"todo-form-input\" rules={descriptionRules}>\r\n        <Input placeholder={'Todo description'} />\r\n      </Form.Item>\r\n      <Form.Item className=\"todo-form-actions\">\r\n        <div className=\"actions-container\">\r\n          <Button className=\"todo-form-action\" htmlType=\"submit\" type=\"primary\">Add</Button>\r\n          <Button className=\"todo-form-action\" htmlType=\"submit\" type=\"primary\" onClick={onRemoveCompleted}>Remove completed</Button>\r\n        </div>\r\n      </Form.Item>\r\n    </Form>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Card, Divider } from 'antd';\r\nimport { ToDoItem } from './ToDoItem';\r\nimport { ToDoForm } from './ToDoForm';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { counter } from '@fortawesome/fontawesome-svg-core';\r\n\r\nconst token = \"3f1b2e94bd0c9e8b754aeefd1200d09583d51951\";\r\nconst config = {\r\n    headers: {\r\n        Authorization: `Bearer ${token}`\r\n    }  \r\n};\r\n\r\nexport const ToDo = () => {\r\n  const [todos, setTodos] = useState([\r\n    {id: 1, content: 'some', completed: false},\r\n    {id: 2, content: 'another one', completed: false}\r\n  ]);\r\n  const [idCount, setIdCount] = useState(10);\r\n\r\n  useEffect(async () => {\r\n    const result = await axios.get(\"https://api.todoist.com/rest/v1/tasks\", config);\r\n    setTodos(result.data);\r\n  }, []);\r\n\r\n  const onRemove = async (id) => {\r\n    const index = todos.findIndex(todo => id === todo.id);\r\n\r\n    if (index !== -1) {\r\n        await axios.delete(`https://api.todoist.com/rest/v1/tasks/${id}`, config);\r\n        todos.splice(index, 1);\r\n        setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const onCheck = async (id) => {\r\n    const index = todos.findIndex(todo => todo.id === id);\r\n    \r\n    if (index !== -1) {\r\n      const todo = todos[index];\r\n\r\n      todo.completed = !todo.completed;\r\n      todos.splice(index, 1, todo);\r\n      setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const onRemoveCompleted = async () => {\r\n    let completed = todos.filter(todo => todo.completed === true);\r\n\r\n    for (let todo of completed) {\r\n      await axios.post(`https://api.todoist.com/rest/v1/tasks/${todo.id}/close`, '', config);\r\n      todos.splice(todos.indexOf(todo), 1);\r\n      setTodos([...todos]);\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (item) => {\r\n    let titleWithCreationDate = item.title + \" | \" + moment(Date.now()).format(\"DD.MM.yyyy - HH:mm\");\r\n    const todo = { content: titleWithCreationDate, description: item.description };\r\n    const { data } = await axios.post(\"https://api.todoist.com/rest/v1/tasks\", todo, config);\r\n    \r\n    setTodos([...todos, { ...todo, id: data.id }]);\r\n    setIdCount(idCount + 1);\r\n  } \r\n\r\n  const renderTodoItems = (todos) => {\r\n    return (\r\n      <ul className=\"todo-list\">\r\n        { todos.map(todo => <ToDoItem \r\n            key={todo.id}\r\n            item={todo}\r\n            onRemove={onRemove} \r\n            onCheck={onCheck} \r\n          />) }\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card id=\"todoCard\" title={'My todos'} extra={\"Count: \" + todos.length} className=\"todo-card\">\r\n      <ToDoForm onSubmit={onSubmit} onRemoveCompleted={onRemoveCompleted} />\r\n      <Divider />\r\n      { renderTodoItems(todos) }\r\n    </Card>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Layout, Row, Col } from 'antd';\r\n\r\nimport { ToDo } from './components/ToDo';\r\n\r\nimport 'antd/dist/antd.css'\r\nimport './index.css';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout>\r\n      <Header></Header>\r\n      <Content>\r\n        <Row>\r\n          <Col span={12} offset={6} className=\"todo\">\r\n            <ToDo />\r\n          </Col>\r\n        </Row>\r\n      </Content>\r\n      <Footer></Footer>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}